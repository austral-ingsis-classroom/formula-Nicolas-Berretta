@startuml

interface Function{
    solve() : Double
    accept(visitor: Visitor): T
    'use T for generics'
}


interface ComposedOperation implements Function{
    getOperand(): Operand
    getLeftNode() : Function
    getRightNode(): Function
}
interface SingleOperation implements Function{
    getNodeFunction(): Function
    getOpeningOperand(): Operand
    getClosingOperand(): Operand
}

class Addition implements ComposedOperation{
    solve() : Double
    accept(visitor: Visitor): T
    getOperand(): Operand
    getLeftNode() : Function
    getRightNode(): Function
}

class Subtraction implements ComposedOperation{
    solve() : Double
    accept(visitor: Visitor): T
    getOperand(): Operand
    getLeftNode() : Function
    getRightNode(): Function
}

class Multiplication implements ComposedOperation{
    solve() : Double
    accept(visitor: Visitor): T
    getOperand(): Operand
    getLeftNode() : Function
    getRightNode(): Function
}

class Division implements ComposedOperation {
    solve() : Double
    accept(visitor: Visitor): T
    getOperand(): Operand
    getLeftNode() : Function
    getRightNode(): Function
}

class Power implements ComposedOperation {
    solve() : Double
    accept(visitor: Visitor): T
    getOperand(): Operand
    getLeftNode() : Function
    getRightNode(): Function
}
class SquareRoot implements SingleOperation{
    solve() : Double
    accept(visitor: Visitor): T
    getNodeFunction(): Function
    getOpeningOperand(): Operand
    getClosingOperand(): Operand
}
class Module implements SingleOperation{
    solve() : Double
    accept(visitor: Visitor): T
    getNodeFunction(): Function
    getOpeningOperand(): Operand
    getClosingOperand(): Operand
}
class Variable implements Function{
    solve() : Double
    accept(visitor: Visitor): T
    name: String
}

class Value implements Function{
    solve() : Double
    accept(visitor: Visitor): T
    value: Double
}

interface Visitor{
    visit(variable: Variable)
    visit(value: Value)
    visit(operation: ComposedOperation)
    visit(operation: SingleOperation)
}

'A function is made of some operations, like sum, subs, multiplication ...'

Visitor -> Function
@enduml